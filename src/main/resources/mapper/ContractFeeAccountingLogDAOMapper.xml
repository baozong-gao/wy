<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shenxin.core.smartpropertymanagement.persist.mapper.ContractFeeAccountingLogDAOMapper" >
  <resultMap id="BaseResultMap" type="com.shenxin.core.smartpropertymanagement.persist.entity.ContractFeeAccountingLogDAO" >
    <id column="ID" property="id" jdbcType="DECIMAL" />
    <result column="COMPANY_ID" property="companyId" jdbcType="DECIMAL" />
    <result column="CONTRACT_FEE_ID" property="contractFeeId" jdbcType="DECIMAL" />
    <result column="ACCOUNTING_TYPE" property="accountingType" jdbcType="VARCHAR" />
    <result column="ACCOUNTING_AMOUNT" property="accountingAmount" jdbcType="DECIMAL" />
    <result column="BEFORE_AMOUNT" property="beforeAmount" jdbcType="DECIMAL" />
    <result column="AFTER_AMOUNT" property="afterAmount" jdbcType="DECIMAL" />
    <result column="ACCOUNTING_DATE" property="accountingDate" jdbcType="CHAR" />
    <result column="ACCOUNTING_REMARK" property="accountingRemark" jdbcType="VARCHAR" />
    <result column="CD_FLAG" property="cdFlag" jdbcType="CHAR" />
    <result column="DELETED" property="deleted" jdbcType="CHAR" />
    <result column="CREATE_USER" property="createUser" jdbcType="VARCHAR" />
    <result column="UPDATE_USER" property="updateUser" jdbcType="VARCHAR" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
    <result column="UPDATE_TIME" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="VERSION" property="version" jdbcType="DECIMAL" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, COMPANY_ID, CONTRACT_FEE_ID, ACCOUNTING_TYPE, ACCOUNTING_AMOUNT, BEFORE_AMOUNT, 
    AFTER_AMOUNT, ACCOUNTING_DATE, ACCOUNTING_REMARK, CD_FLAG, DELETED, CREATE_USER, 
    UPDATE_USER, CREATE_TIME, UPDATE_TIME, VERSION
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.shenxin.core.smartpropertymanagement.persist.entity.ContractFeeAccountingLogDAOExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from CONTRACT_FEE_ACCOUNTING_LOG
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.math.BigDecimal" >
    select 
    <include refid="Base_Column_List" />
    from CONTRACT_FEE_ACCOUNTING_LOG
    where ID = #{id,jdbcType=DECIMAL}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.math.BigDecimal" >
    delete from CONTRACT_FEE_ACCOUNTING_LOG
    where ID = #{id,jdbcType=DECIMAL}
  </delete>
  <delete id="deleteByExample" parameterType="com.shenxin.core.smartpropertymanagement.persist.entity.ContractFeeAccountingLogDAOExample" >
    delete from CONTRACT_FEE_ACCOUNTING_LOG
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.shenxin.core.smartpropertymanagement.persist.entity.ContractFeeAccountingLogDAO" >
    insert into CONTRACT_FEE_ACCOUNTING_LOG (ID, COMPANY_ID, CONTRACT_FEE_ID, 
      ACCOUNTING_TYPE, ACCOUNTING_AMOUNT, BEFORE_AMOUNT, 
      AFTER_AMOUNT, ACCOUNTING_DATE, ACCOUNTING_REMARK, 
      CD_FLAG, DELETED, CREATE_USER, 
      UPDATE_USER, CREATE_TIME, UPDATE_TIME, 
      VERSION)
    values (#{id,jdbcType=DECIMAL}, #{companyId,jdbcType=DECIMAL}, #{contractFeeId,jdbcType=DECIMAL}, 
      #{accountingType,jdbcType=VARCHAR}, #{accountingAmount,jdbcType=DECIMAL}, #{beforeAmount,jdbcType=DECIMAL}, 
      #{afterAmount,jdbcType=DECIMAL}, #{accountingDate,jdbcType=CHAR}, #{accountingRemark,jdbcType=VARCHAR}, 
      #{cdFlag,jdbcType=CHAR}, #{deleted,jdbcType=CHAR}, #{createUser,jdbcType=VARCHAR}, 
      #{updateUser,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{version,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.shenxin.core.smartpropertymanagement.persist.entity.ContractFeeAccountingLogDAO" >
    insert into CONTRACT_FEE_ACCOUNTING_LOG
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="companyId != null" >
        COMPANY_ID,
      </if>
      <if test="contractFeeId != null" >
        CONTRACT_FEE_ID,
      </if>
      <if test="accountingType != null" >
        ACCOUNTING_TYPE,
      </if>
      <if test="accountingAmount != null" >
        ACCOUNTING_AMOUNT,
      </if>
      <if test="beforeAmount != null" >
        BEFORE_AMOUNT,
      </if>
      <if test="afterAmount != null" >
        AFTER_AMOUNT,
      </if>
      <if test="accountingDate != null" >
        ACCOUNTING_DATE,
      </if>
      <if test="accountingRemark != null" >
        ACCOUNTING_REMARK,
      </if>
      <if test="cdFlag != null" >
        CD_FLAG,
      </if>
      <if test="deleted != null" >
        DELETED,
      </if>
      <if test="createUser != null" >
        CREATE_USER,
      </if>
      <if test="updateUser != null" >
        UPDATE_USER,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME,
      </if>
      <if test="version != null" >
        VERSION,
      </if>
    </trim>
    <selectKey resultType="decimal" keyProperty="id" order="BEFORE">
      select TO_CHAR(SYSDATE,'YYYYMMDD')||TO_CHAR(CONTRACT_FEE_ACCOUNTING_SEQ.nextval) as ID from dual
    </selectKey>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=DECIMAL},
      </if>
      <if test="companyId != null" >
        #{companyId,jdbcType=DECIMAL},
      </if>
      <if test="contractFeeId != null" >
        #{contractFeeId,jdbcType=DECIMAL},
      </if>
      <if test="accountingType != null" >
        #{accountingType,jdbcType=VARCHAR},
      </if>
      <if test="accountingAmount != null" >
        #{accountingAmount,jdbcType=DECIMAL},
      </if>
      <if test="beforeAmount != null" >
        #{beforeAmount,jdbcType=DECIMAL},
      </if>
      <if test="afterAmount != null" >
        #{afterAmount,jdbcType=DECIMAL},
      </if>
      <if test="accountingDate != null" >
        #{accountingDate,jdbcType=CHAR},
      </if>
      <if test="accountingRemark != null" >
        #{accountingRemark,jdbcType=VARCHAR},
      </if>
      <if test="cdFlag != null" >
        #{cdFlag,jdbcType=CHAR},
      </if>
      <if test="deleted != null" >
        #{deleted,jdbcType=CHAR},
      </if>
      <if test="createUser != null" >
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateUser != null" >
        #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null" >
        #{version,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.shenxin.core.smartpropertymanagement.persist.entity.ContractFeeAccountingLogDAOExample" resultType="java.lang.Integer" >
    select count(*) from CONTRACT_FEE_ACCOUNTING_LOG
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update CONTRACT_FEE_ACCOUNTING_LOG
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=DECIMAL},
      </if>
      <if test="record.companyId != null" >
        COMPANY_ID = #{record.companyId,jdbcType=DECIMAL},
      </if>
      <if test="record.contractFeeId != null" >
        CONTRACT_FEE_ID = #{record.contractFeeId,jdbcType=DECIMAL},
      </if>
      <if test="record.accountingType != null" >
        ACCOUNTING_TYPE = #{record.accountingType,jdbcType=VARCHAR},
      </if>
      <if test="record.accountingAmount != null" >
        ACCOUNTING_AMOUNT = #{record.accountingAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.beforeAmount != null" >
        BEFORE_AMOUNT = #{record.beforeAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.afterAmount != null" >
        AFTER_AMOUNT = #{record.afterAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.accountingDate != null" >
        ACCOUNTING_DATE = #{record.accountingDate,jdbcType=CHAR},
      </if>
      <if test="record.accountingRemark != null" >
        ACCOUNTING_REMARK = #{record.accountingRemark,jdbcType=VARCHAR},
      </if>
      <if test="record.cdFlag != null" >
        CD_FLAG = #{record.cdFlag,jdbcType=CHAR},
      </if>
      <if test="record.deleted != null" >
        DELETED = #{record.deleted,jdbcType=CHAR},
      </if>
      <if test="record.createUser != null" >
        CREATE_USER = #{record.createUser,jdbcType=VARCHAR},
      </if>
      <if test="record.updateUser != null" >
        UPDATE_USER = #{record.updateUser,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.version != null" >
        VERSION = #{record.version,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update CONTRACT_FEE_ACCOUNTING_LOG
    set ID = #{record.id,jdbcType=DECIMAL},
      COMPANY_ID = #{record.companyId,jdbcType=DECIMAL},
      CONTRACT_FEE_ID = #{record.contractFeeId,jdbcType=DECIMAL},
      ACCOUNTING_TYPE = #{record.accountingType,jdbcType=VARCHAR},
      ACCOUNTING_AMOUNT = #{record.accountingAmount,jdbcType=DECIMAL},
      BEFORE_AMOUNT = #{record.beforeAmount,jdbcType=DECIMAL},
      AFTER_AMOUNT = #{record.afterAmount,jdbcType=DECIMAL},
      ACCOUNTING_DATE = #{record.accountingDate,jdbcType=CHAR},
      ACCOUNTING_REMARK = #{record.accountingRemark,jdbcType=VARCHAR},
      CD_FLAG = #{record.cdFlag,jdbcType=CHAR},
      DELETED = #{record.deleted,jdbcType=CHAR},
      CREATE_USER = #{record.createUser,jdbcType=VARCHAR},
      UPDATE_USER = #{record.updateUser,jdbcType=VARCHAR},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      VERSION = #{record.version,jdbcType=DECIMAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.shenxin.core.smartpropertymanagement.persist.entity.ContractFeeAccountingLogDAO" >
    update CONTRACT_FEE_ACCOUNTING_LOG
    <set >
      <if test="companyId != null" >
        COMPANY_ID = #{companyId,jdbcType=DECIMAL},
      </if>
      <if test="contractFeeId != null" >
        CONTRACT_FEE_ID = #{contractFeeId,jdbcType=DECIMAL},
      </if>
      <if test="accountingType != null" >
        ACCOUNTING_TYPE = #{accountingType,jdbcType=VARCHAR},
      </if>
      <if test="accountingAmount != null" >
        ACCOUNTING_AMOUNT = #{accountingAmount,jdbcType=DECIMAL},
      </if>
      <if test="beforeAmount != null" >
        BEFORE_AMOUNT = #{beforeAmount,jdbcType=DECIMAL},
      </if>
      <if test="afterAmount != null" >
        AFTER_AMOUNT = #{afterAmount,jdbcType=DECIMAL},
      </if>
      <if test="accountingDate != null" >
        ACCOUNTING_DATE = #{accountingDate,jdbcType=CHAR},
      </if>
      <if test="accountingRemark != null" >
        ACCOUNTING_REMARK = #{accountingRemark,jdbcType=VARCHAR},
      </if>
      <if test="cdFlag != null" >
        CD_FLAG = #{cdFlag,jdbcType=CHAR},
      </if>
      <if test="deleted != null" >
        DELETED = #{deleted,jdbcType=CHAR},
      </if>
      <if test="createUser != null" >
        CREATE_USER = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateUser != null" >
        UPDATE_USER = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null" >
        VERSION = #{version,jdbcType=DECIMAL},
      </if>
    </set>
    where ID = #{id,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.shenxin.core.smartpropertymanagement.persist.entity.ContractFeeAccountingLogDAO" >
    update CONTRACT_FEE_ACCOUNTING_LOG
    set COMPANY_ID = #{companyId,jdbcType=DECIMAL},
      CONTRACT_FEE_ID = #{contractFeeId,jdbcType=DECIMAL},
      ACCOUNTING_TYPE = #{accountingType,jdbcType=VARCHAR},
      ACCOUNTING_AMOUNT = #{accountingAmount,jdbcType=DECIMAL},
      BEFORE_AMOUNT = #{beforeAmount,jdbcType=DECIMAL},
      AFTER_AMOUNT = #{afterAmount,jdbcType=DECIMAL},
      ACCOUNTING_DATE = #{accountingDate,jdbcType=CHAR},
      ACCOUNTING_REMARK = #{accountingRemark,jdbcType=VARCHAR},
      CD_FLAG = #{cdFlag,jdbcType=CHAR},
      DELETED = #{deleted,jdbcType=CHAR},
      CREATE_USER = #{createUser,jdbcType=VARCHAR},
      UPDATE_USER = #{updateUser,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      VERSION = #{version,jdbcType=DECIMAL}
    where ID = #{id,jdbcType=DECIMAL}
  </update>
</mapper>